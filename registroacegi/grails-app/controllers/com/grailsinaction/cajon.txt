def customShippingFlow = {

        selectShippingType {
            on("next") {
                conversation.sc.shippingType = params.shippingType
            }.to("selectShippingOptions")
            on("standardShipping").to("standardShipping")
            on("previous").to("goBack")
        }

        selectShippingOptions {
            on("previous").to("selectShippingType")
            on("next") {
                conversation.sc.shippingOptions = params.shippingOptions
            }.to("customShipping")
        }

        customShipping()
        standardShipping()
        goBack()
    }

     enterAddress {
                on("next") { ShippingCommand sc ->
                    conversation.sc = sc
                    if (sc.hasErrors()) {
                        return error()
                    }
                }.to("checkShipping")
                on("previous").to("displayProducts")
            }

            checkShipping {
                action {
                    if (conversation.sc.customShipping) {
                        custom()
                    } else {
                        standard()
                    }
                }
                on("custom").to("customShipping")
                on("standard").to("enterPayment")
            }

            customShipping {
                subflow(customShippingFlow)
                on("goBack").to("enterAddress")
                on("standardShipping") {
                    conversation.sc.customShipping = false
                }.to("enterPayment")
                on("customShipping").to("enterPayment")
            }

            enterPayment {
                on("next") {  PaymentCommand pc ->
                    flow.pc = pc
                    if (pc.hasErrors()) {
                        return error()
                    }
                }.to("validateCard")
                on("previous").to("enterAddress")
            }


            validateCard {
                action {
                    //def validCard = new Date().hours > 11 // PM is nice
                   /* def validCard = creditCardService.checkCard(
                            conversation.pc.cardNumber,
                            conversation.pc.name,
                            conversation.pc.expiry)  */
                    def validCard = true
                    if (validCard) {
                        valid()
                    } else {
                        flow.pc.errors.rejectValue("cardNumber",
                                "card.failed.validation",
                                "This credit card is dodgy")
                        invalid()
                    }
                }
                on("valid").to("orderComplete")
                on("invalid").to("enterPayment")
            }

            orderComplete {
                // display order
                on("finished").to("finish")
            }